name: Build and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ "closed" ]
    branches: [ "main" ]

jobs:
  check-version-and-deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetches all history for all branches and tags
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Extract version from pom.xml
      id: get_version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version extracted from pom.xml: $VERSION"
    
    - name: Check for version change
      id: check_version
      run: |
        git fetch origin
        PREV_VERSION=$(git show origin/main:pom.xml | grep -m 1 "<version>" | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
        echo "Previous version: $PREV_VERSION"
        echo "Current version: ${{ env.VERSION }}"
        if [ "$PREV_VERSION" != "${{ env.VERSION }}" ]; then
          echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          echo "Version has changed from $PREV_VERSION to ${{ env.VERSION }}"
        else
          echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          echo "Version remains unchanged at ${{ env.VERSION }}"
        fi
    
    - name: Build with Maven
      if: env.VERSION_CHANGED == 'true'
      run: mvn -B clean package -DskipTests
    
    - name: Set up QEMU
      if: env.VERSION_CHANGED == 'true'
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      if: env.VERSION_CHANGED == 'true'
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: env.VERSION_CHANGED == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      if: env.VERSION_CHANGED == 'true'
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          yangding14/ilmiah-alert:${{ env.VERSION }}
          yangding14/ilmiah-alert:latest
        cache-from: type=registry,ref=yangding14/ilmiah-alert:buildcache
        cache-to: type=registry,ref=yangding14/ilmiah-alert:buildcache,mode=max
    
    - name: Image digest
      if: env.VERSION_CHANGED == 'true'
      run: echo ${{ steps.docker_build.outputs.digest }}

    - name: Deploy to Render
      if: env.VERSION_CHANGED == 'true'
      run: |
        curl --request PATCH \
             --url https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }} \
             --header 'accept: application/json' \
             --header 'authorization: Bearer ${{ secrets.RENDER_API_KEY }}' \
             --header 'content-type: application/json' \
             --data '{
               "autoDeploy": "yes",
               "image": {
                 "ownerId": "${{ secrets.RENDER_OWNER_ID }}",
                 "registryCredentialId": "${{ secrets.RENDER_REGISTRY_CREDENTIAL_ID }}",
                 "imagePath": "docker.io/yangding14/ilmiah-alert:${{ env.VERSION }}"
               },
               "serviceDetails": {
                 "pullRequestPreviewsEnabled": "no",
                 "previews": {
                   "generation": "off"
                 }
               }
             }'
    
    - name: Create GitHub Release
      if: env.VERSION_CHANGED == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
